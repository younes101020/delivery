services:
  web:
    image: younes60/web:${DOCKER_TAGS}
    build:
      context: .
      dockerfile: ./apps/web/prod.Dockerfile
    environment:
      - AUTH_SECRET=${AUTH_SECRET}
      - JOBS_BEARER_TOKEN=${JOBS_BEARER_TOKEN}
      - JOBS_API_BASEURL=${JOBS_API_BASEURL}
      - NEXT_PUBLIC_BASEURL=${NEXT_PUBLIC_BASEURL}
    volumes:
      - ./apps/web/src:/app/src
    restart: always
    ports:
      - 3000:3000
    networks:
      - proxy
    depends_on:
      - jobs

  jobs:
    image: younes60/jobs:${DOCKER_TAGS}
    build:
      context: .
      dockerfile: ./apps/jobs/prod.Dockerfile
    environment:
      - PORT=${PORT}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_ENV=${NODE_ENV}
      - SSH_HOST=${SSH_HOST}
      - BEARER_TOKEN=${BEARER_TOKEN}
      - MINIO_SERVER_ACCESS_KEY=${MINIO_SERVER_ACCESS_KEY}
      - MINIO_SERVER_SECRET_KEY=${MINIO_SERVER_SECRET_KEY}
      - MINIO_PUBLIC_DOMAIN=${MINIO_PUBLIC_DOMAIN}
      - TEST_USERS_PASSWORD=${TEST_USERS_PASSWORD}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - /data/delivery/ssh/keys:/var/ssh/keys
    restart: always
    ports:
      - 3090:3090
    networks:
      - proxy
    depends_on:
      - db

  db:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - proxy
    volumes:
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ${PWD}/db-data/:/var/lib/postgresql@16/data:rw
    restart: always
  
  screenshots-storage:
    image: bitnami/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
    networks:
      - proxy
    restart: always
  
  bull_queue:
    image: redis
    container_name: delivery-bull-queue
    command: redis-server --save 60 1 --loglevel warning --maxmemory-policy noeviction --maxmemory 2gb
    restart: always
    ports:
      - 6379:6379
    networks:
      - proxy

  adminer:
    image: adminer
    restart: always
    ports:
      - 3050:8080
    networks:
      - proxy
  
  traefik:
    image: "traefik:v3.2"
    deploy:
      placement:
        constraints:
          - node.role == manager
    container_name: "traefik"
    command:
      - --api.dashboard=true
      - --log.level=INFO
      #- --log.filepath=/var/log/traefik.log
      - --accesslog=true
      #- --accesslog.filepath=/var/log/traefik-access.log
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.asDefault=true 
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      - --certificatesresolvers.myresolver.acme.email=younesfakallah60@gmail.com
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.routers.mydashboard.rule=Host(`traefik.example.com`)
      - traefik.http.routers.mydashboard.service=api@internal
      - traefik.http.routers.mydashboard.middlewares=myauth
      - traefik.http.middlewares.myauth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./config:/etc/traefik/config"
    networks:
      - proxy
    restart: always

networks:
  proxy:
    name: proxy

volumes:
  postgres_data:
    name: postgres_data
  letsencrypt:
    name: letsencrypt
