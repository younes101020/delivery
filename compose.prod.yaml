services:
  web:
    image: younes60/web:${DOCKER_TAGS}
    build:
      context: .
      dockerfile: ./apps/web/prod.Dockerfile
      args:
        NEXT_PUBLIC_BASEURL: ${NEXT_PUBLIC_BASEURL}
    environment:
      - AUTH_SECRET=${AUTH_SECRET}
      - JOBS_BEARER_TOKEN=${JOBS_BEARER_TOKEN}
      - JOBS_API_BASEURL=${JOBS_API_BASEURL}
    volumes:
      - ./apps/web/src:/app/src
    ports:
      - 3000:3000
    networks:
      - proxy
    depends_on:
      - jobs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.entrypoints=web-secure"
      - "traefik.http.routers.web.rule=Host(`web.localhost`)"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=tlschallenge"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

  jobs:
    image: younes60/jobs:${DOCKER_TAGS}
    build:
      context: .
      dockerfile: ./apps/jobs/prod.Dockerfile
    environment:
      - PORT=${PORT}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_ENV=${NODE_ENV}
      - SSH_HOST=${SSH_HOST}
      - BEARER_TOKEN=${BEARER_TOKEN}
      - MINIO_SERVER_ACCESS_KEY=${MINIO_SERVER_ACCESS_KEY}
      - MINIO_SERVER_SECRET_KEY=${MINIO_SERVER_SECRET_KEY}
      - MINIO_PUBLIC_DOMAIN=${MINIO_PUBLIC_DOMAIN}
      - TEST_USERS_PASSWORD=${TEST_USERS_PASSWORD}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - /data/delivery/ssh/keys:/var/ssh/keys
    ports:
      - 3090:3090
    networks:
      - proxy
    depends_on:
      db:
        condition: service_healthy
      bull_queue:
        condition: service_healthy

  db:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - PGUSER=postgres
    networks:
      - proxy
    volumes:
      - ./infrastructure/database:/docker-entrypoint-initdb.d/
      - ${PWD}/db-data/:/var/lib/postgresql@16/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  screenshots-storage:
    image: bitnami/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
    networks:
      - proxy
    restart: always
  
  bull_queue:
    image: redis
    container_name: delivery-bull-queue
    command: redis-server --save 60 1 --loglevel warning --maxmemory-policy noeviction --maxmemory 2gb
    restart: always
    ports:
      - 6379:6379
    networks:
      - proxy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 3050:8080
    networks:
      - proxy
  
  traefik:
    image: "traefik:v3.3.6"
    deploy:
      placement:
        constraints:
          - node.role == manager
    labels:
      - "traefik.enable=true"

      # define traefik dashboard router and service
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=tlschallenge"
      - "traefik.http.routers.traefik.entrypoints=web-secure"
      - "traefik.http.routers.traefik.middlewares=autodetectContenttype@file"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./infrastructure/traefik-config/traefik.yaml:/etc/traefik/traefik.yaml:ro  # static traefik configuration
      - ./infrastructure/traefik-config/dynamic.yaml:/etc/traefik/dynamic.yaml:ro  # dynamic traefik configuration
      - ./infrastructure/traefik-config/acme.json:/etc/traefik/acme.json           # TLS certificate storage
    networks:
      - proxy
    restart: always

networks:
  proxy:
    name: proxy

volumes:
  postgres_data:
    name: postgres_data
  letsencrypt:
    name: letsencrypt
